name: Build and Release Multi-Arch Application

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: OverwatchLocalizer
  PYTHON_VERSION: '3.11'

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows x64
          - os: windows-latest
            arch: 'x64'
            target: 'windows-x64'
            pyinstaller_arch_flag: ''

          # Windows x86
          - os: windows-latest
            arch: 'x86'
            target: 'windows-x86'
            pyinstaller_arch_flag: '--target-arch=x86'

          # macOS x86_64
          - os: macos-latest
            arch: 'x86_64'
            target: 'macos-x86_64'
            pyinstaller_arch_flag: '--target-arch=x86_64'

          # macOS arm64
          - os: macos-latest
            arch: 'arm64'
            target: 'macos-arm64'
            pyinstaller_arch_flag: '--target-arch=arm64'

          # Linux x86_64
          - os: ubuntu-latest
            arch: 'x86_64'
            target: 'linux-x86_64'
            pyinstaller_arch_flag: '' # Defaults to the runner's arch

          # Linux aarch64
          - os: ubuntu-latest
            arch: 'aarch64'
            target: 'linux-aarch64'
            pyinstaller_arch_flag: ''

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Set up QEMU
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64


      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.arch }}


      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller wheel
          pip install -r requirements.txt

      - name: Build executable with PyInstaller
        shell: bash
        run: |
          pyinstaller app.py \
            --noconsole \
            --onefile \
            --windowed \
            --name ${{ env.APP_NAME }}-${{ matrix.target }} \
            ${{ matrix.pyinstaller_arch_flag }}


      - name: Package artifact
        shell: bash
        run: |
          shell: bash
          mkdir -p artifact
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a artifact/${{ env.APP_NAME }}-${{ matrix.target }}.zip ./dist/${{ env.APP_NAME }}-${{ matrix.target }}.exe
          else
            tar -czvf artifact/${{ env.APP_NAME }}-${{ matrix.target }}.tar.gz -C ./dist/ .
          fi

      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.target }}
          path: artifact/*

  release:
    needs: build
    runs-on: ubuntu-latest


    permissions:
      contents: write

    steps:
      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          body: "Automated release for ${{ env.APP_NAME }} version ${{ env.TAG_NAME }}."
          draft: false
          prerelease: false

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/

      - name: Upload assets to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: all-artifacts/*/*
