name: Build and Release Multi-Arch Application

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: OverwatchLocalizer
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build for ${{ matrix.os_name }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os_image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_name: windows
            os_image: windows-latest
            arch: x64
            pyinstaller_target_arch: win_amd64
            asset_suffix: win-x64.zip
            python_arch: x64
          - os_name: windows
            os_image: windows-latest
            arch: x86
            pyinstaller_target_arch: win32
            asset_suffix: win-x86.zip
            python_arch: x86
          - os_name: linux
            os_image: ubuntu-latest
            arch: x64
            pyinstaller_target_arch: linux_x86_64
            asset_suffix: linux-x64.tar.gz
            python_arch: x64
          - os_name: linux-arm64
            os_image: ubuntu-latest
            arch: arm64
            pyinstaller_target_arch: linux_aarch64
            asset_suffix: linux-arm64.tar.gz
            python_arch: aarch64
          - os_name: macos
            os_image: macos-latest
            arch: universal
            pyinstaller_target_arch: macos_universal2
            asset_suffix: macos-universal.dmg
            python_arch: universal2

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }} - ${{ matrix.python_arch }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.python_arch }}

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, installing default dependencies."
          pip install openpyxl tkinterdnd2-universal requests
        fi

    - name: Build with PyInstaller (${{ matrix.pyinstaller_target_arch }})
      shell: bash
      run: |
        pyinstaller --name ${{ env.APP_NAME }} \
                    --onefile \
                    --windowed \
                    --noconfirm \
                    # --icon=icon.ico \
                    main.py

    - name: Prepare Artifacts (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path dist/${{ env.APP_NAME }}.exe -DestinationPath ${{ env.APP_NAME }}-${{ matrix.asset_suffix }}

    - name: Prepare Artifacts (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        tar -czvf ${{ env.APP_NAME }}-${{ matrix.asset_suffix }} -C dist/ ${{ env.APP_NAME }}

    - name: Prepare Artifacts (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        if [ -d "dist/${{ env.APP_NAME }}.app" ]; then
          hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder "dist/${{ env.APP_NAME }}.app" -ov -format UDZO "${{ env.APP_NAME }}-${{ matrix.asset_suffix }}"
        else
          zip -r ${{ env.APP_NAME }}-${{ matrix.asset_suffix }} dist/${{ env.APP_NAME }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os_name }}-${{ matrix.arch }}
        path: ${{ env.APP_NAME }}-${{ matrix.asset_suffix }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded files (for debugging)
      shell: bash
      run: ls -R

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          OverwatchLocalizer-*/*.*