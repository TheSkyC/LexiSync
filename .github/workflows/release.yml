name: Build and Release Multi-Arch Application

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: OverwatchLocalizer
  PYTHON_VERSION: '3.11.0'

jobs:
  build:
    name: Build for ${{ matrix.os_name }}-${{ matrix.arch_display }}
    runs-on: ${{ matrix.os_image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - os_name: windows
            os_image: windows-latest
            arch_display: x64
            python_arch: x64
            asset_suffix: win-x64.zip
          - os_name: windows
            os_image: windows-latest
            arch_display: x86
            python_arch: x86
            asset_suffix: win-x86.zip
          # Linux
          - os_name: linux
            os_image: ubuntu-latest
            arch_display: x64
            python_arch: x64
            asset_suffix: linux-x64.tar.gz
          # macOS
          - os_name: macos
            os_image: macos-latest
            arch_display: universal
            asset_suffix: macos-universal.dmg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine macOS Python Architecture
      id: mac_arch
      if: matrix.os_name == 'macos'
      shell: bash
      run: |
        echo "Runner Arch (from GITHUB_RUNNER_ARCH): $RUNNER_ARCH"
        if [[ "$RUNNER_ARCH" == "ARM64" ]]; then
          echo "python_arch_for_macos=arm64" >> $GITHUB_OUTPUT
        else
          echo "python_arch_for_macos=x64" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ (matrix.os_name == 'macos' && steps.mac_arch.outputs.python_arch_for_macos) || matrix.python_arch }}

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, installing default dependencies."
          pip install openpyxl tkinterdnd2-universal requests
        fi

    - name: Build with PyInstaller for ${{ matrix.os_name }}
      shell: bash
      run: |
        PYINSTALLER_ARGS="--name ${{ env.APP_NAME }} --onefile --windowed --noconfirm"
        
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "Building for macOS. Python arch: ${{ steps.mac_arch.outputs.python_arch_for_macos }}"
        fi
        
        pyinstaller $PYINSTALLER_ARGS main.py

    - name: Prepare Artifacts (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path dist/${{ env.APP_NAME }}.exe -DestinationPath ${{ env.APP_NAME }}-${{ matrix.asset_suffix }}

    - name: Prepare Artifacts (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        tar -czvf ${{ env.APP_NAME }}-${{ matrix.asset_suffix }} -C dist/ ${{ env.APP_NAME }}

    - name: Prepare Artifacts (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        APP_BUNDLE_PATH="dist/${{ env.APP_NAME }}.app"
        FINAL_EXECUTABLE_PATH="dist/${{ env.APP_NAME }}"

        if [ -d "$APP_BUNDLE_PATH" ]; then
          echo "Found .app bundle: $APP_BUNDLE_PATH"
          hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder "$APP_BUNDLE_PATH" -ov -format UDZO "${{ env.APP_NAME }}-${{ matrix.asset_suffix }}"
          echo "Created DMG: ${{ env.APP_NAME }}-${{ matrix.asset_suffix }}"
        elif [ -f "$FINAL_EXECUTABLE_PATH" ]; then
          echo "Found single executable: $FINAL_EXECUTABLE_PATH. Zipping it."
          zip -j ${{ env.APP_NAME }}-${{ matrix.asset_suffix }} "$FINAL_EXECUTABLE_PATH"
          echo "Created ZIP: ${{ env.APP_NAME }}-${{ matrix.asset_suffix }}"
        else
          echo "Error: Neither .app bundle nor single executable found in dist/ for macOS."
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os_name }}-${{ matrix.arch_display }}
        path: ${{ env.APP_NAME }}-${{ matrix.asset_suffix }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded files (for debugging)
      shell: bash
      run: ls -R

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          OverwatchLocalizer-*/*.*