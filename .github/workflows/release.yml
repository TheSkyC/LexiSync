name: Build and Release Multi-Arch Application

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  APP_NAME: OverwatchLocalizer
  PYTHON_VERSION: '3.11.0'

jobs:
  build:
    name: Build for ${{ matrix.os_name }}-${{ matrix.arch_display }}
    runs-on: ${{ matrix.os_image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_name: windows
            os_image: windows-latest
            arch_display: x64
            python_arch: x64
            asset_suffix: win-x64.zip
          - os_name: linux
            os_image: ubuntu-latest
            arch_display: x64
            python_arch: x64
            asset_suffix: linux-x64.tar.gz
          - os_name: macos
            os_image: macos-latest
            arch_display: universal
            asset_suffix: macos-universal.dmg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine macOS Python Architecture
      id: mac_arch
      if: matrix.os_name == 'macos'
      shell: bash
      run: |
        if [[ "$RUNNER_ARCH" == "ARM64" ]]; then
          echo "python_arch_for_macos=arm64" >> $GITHUB_OUTPUT
        else
          echo "python_arch_for_macos=x64" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ (matrix.os_name == 'macos' && steps.mac_arch.outputs.python_arch_for_macos) || matrix.python_arch }}

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          echo "requirements.txt not found, installing default dependencies."
          pip install PySide6 PySide6-Charts openpyxl polib requests
        fi

    - name: Install UPX (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y upx-ucl

    - name: Install UPX (Windows)
      id: upx_windows
      if: runner.os == 'Windows'
      uses: crazy-max/ghaction-upx@v3
      with:
        version: latest

    - name: Install UPX (macOS)
      if: runner.os == 'macOS'
      run: brew install upx

    - name: Build with PyInstaller
      shell: bash
      run: |
        echo "Preparing clean locales directory for packaging..."
        python -c "
        import os, shutil
        source_dir = 'locales'
        target_dir = 'dist_locales'
        if os.path.exists(target_dir):
            shutil.rmtree(target_dir)
        for root, dirs, files in os.walk(source_dir):
            for file in files:
                if file.endswith('.mo'):
                    source_path = os.path.join(root, file)
                    relative_path = os.path.relpath(source_path, source_dir)
                    target_path = os.path.join(target_dir, relative_path)
                    os.makedirs(os.path.dirname(target_path), exist_ok=True)
                    shutil.copy2(source_path, target_path)
        "
        
        DATA_SEPARATOR=':'
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          DATA_SEPARATOR=';'
        fi
        
        echo "Building for ${{ matrix.os_name }}..."
        
        pyinstaller \
          --name "${{ env.APP_NAME }}" \
          --windowed \
          --noconfirm \
          --add-data "dist_locales${DATA_SEPARATOR}locales" \
          --exclude-module Qt6Network \
          --exclude-module Qt6Sql \
          --exclude-module Qt6Test \
          --exclude-module Qt6Xml \
          --exclude-module Qt6Qml \
          --exclude-module Qt6Quick \
          --exclude-module Qt6WebEngineWidgets \
          --exclude-module Qt6WebEngineCore \
          --exclude-module Qt6WebChannel \
          --exclude-module Qt6Positioning \
          --exclude-module Qt6Sensors \
          --exclude-module Qt6Nfc \
          --exclude-module Qt6Bluetooth \
          --exclude-module Qt6DataVisualization \
          --exclude-module Qt6Multimedia \
          main.py

    - name: Compress with UPX (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $distDir = "dist/${{ env.APP_NAME }}"
        $upxPath = "${{ steps.upx_windows.outputs.upx_path }}"
        Write-Host "UPX Path: $upxPath"
        Write-Host "Compressing files in $distDir..."
        
        & $upxPath --best --lzma "$distDir/${{ env.APP_NAME }}.exe"
        Get-ChildItem -Path $distDir -Recurse -Include *.dll, *.pyd | ForEach-Object {
          Write-Host "Compressing $($_.Name)..."
          & $upxPath --best --lzma $_.FullName
        }
        Write-Host "UPX compression finished for Windows."

    - name: Compress with UPX (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        DIST_DIR="dist/${{ env.APP_NAME }}"
        echo "Compressing files in $DIST_DIR..."
        upx --best --lzma "$DIST_DIR/${{ env.APP_NAME }}"
        find "$DIST_DIR" -type f -name "*.so" -exec upx --best --lzma {} \;
        echo "UPX compression finished for Linux."

    - name: Prepare Artifacts (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Compress-Archive -Path dist/${{ env.APP_NAME }} -DestinationPath ${{ env.APP_NAME }}-${{ matrix.asset_suffix }} -Force

    - name: Compress with UPX (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        DIST_DIR="dist/${{ env.APP_NAME }}"
        echo "Compressing files in $DIST_DIR..."
        upx --best --lzma --force-macos "$DIST_DIR/${{ env.APP_NAME }}"
        echo "UPX compression finished for macOS."

    - name: Prepare Artifacts (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        tar -czvf ${{ env.APP_NAME }}-${{ matrix.asset_suffix }} -C dist/ ${{ env.APP_NAME }}

    - name: Prepare Artifacts (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        APP_BUNDLE_PATH="dist/${{ env.APP_NAME }}.app"
        if [ -d "$APP_BUNDLE_PATH" ]; then
          echo "Waiting for 3 seconds to ensure file handles are released..."
          sleep 3
          hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder "$APP_BUNDLE_PATH" -ov -format UDZO "${{ env.APP_NAME }}-${{ matrix.asset_suffix }}"
        else
          echo "Error: .app bundle not found in dist/ for macOS."
          exit 1
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.os_name }}-${{ matrix.arch_display }}
        path: ${{ env.APP_NAME }}-${{ matrix.asset_suffix }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded files
      run: ls -R artifacts

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*/*