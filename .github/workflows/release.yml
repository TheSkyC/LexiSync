name: Build and Release Multi-Arch Application
on:
  push:
    tags:
      - 'v*.*.*'
env:
  APP_NAME: OverwatchLocalizer
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: 'x64'
            python-arch: 'x64'
          - os: windows-latest
            arch: 'x86'
            python-arch: 'x86'
          - os: ubuntu-latest
            arch: 'x64'
            python-arch: 'x64'
          - os: ubuntu-latest
            arch: 'arm64'
            python-arch: 'x64'
          - os: macos-12
            arch: 'x64'
            python-arch: 'x64'
          - os: macos-14
            arch: 'arm64'
            python-arch: 'arm64'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup QEMU for ARM build
        if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.python-arch }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build with PyInstaller
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            SEP=";"
          else
            SEP=":"
          fi
          
          CERTIFI_PATH=$(python -m certifi)
          TKINTERDND2_PATH=$(python -c "import os, tkinterdnd2; print(os.path.dirname(tkinterdnd2.__file__))")
          
          PYINSTALLER_CMD="pyinstaller --noconfirm --onefile --windowed --name \"${{ env.APP_NAME }}\" \
            --add-data \"components${SEP}components\" \
            --add-data \"dialogs${SEP}dialogs\" \
            --add-data \"services${SEP}services\" \
            --add-data \"utils${SEP}utils\" \
            --add-data \"${TKINTERDND2_PATH}${SEP}tkinterdnd2\" \
            --add-data \"${CERTIFI_PATH}${SEP}certifi\" \
            --hidden-import \"openpyxl\" \
            --hidden-import \"PIL.Image\" \
            main.py"

          if [ "${{ matrix.arch }}" == "arm64" ] && [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            docker run --rm -v "$(pwd):/src" -w /src arm64v8/ubuntu:22.04 /bin/bash -c "apt-get update && apt-get install -y python3-pip python3-tk && python3 -m pip install --upgrade pip && pip3 install -r requirements.txt && pip3 install pyinstaller && ${PYINSTALLER_CMD}"
          else
            eval $PYINSTALLER_CMD
          fi

      - name: Package the application
        id: package
        shell: bash
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          if [ "${{ runner.os }}" == "Windows" ]; then
            ASSET_PATH="dist/${{ env.APP_NAME }}.exe"
            ARCHIVE_NAME="${{ env.APP_NAME }}-${VERSION}-windows-${{ matrix.arch }}.zip"
            powershell -Command "Compress-Archive -Path '${ASSET_PATH}' -DestinationPath '${ARCHIVE_NAME}'"
          elif [ "${{ runner.os }}" == "macOS" ]; then
            ASSET_PATH="dist/${{ env.APP_NAME }}.app"
            ARCHIVE_NAME="${{ env.APP_NAME }}-${VERSION}-macos-${{ matrix.arch }}.zip"
            zip -r "${ARCHIVE_NAME}" "${ASSET_PATH}"
          else
            ASSET_PATH="dist/${{ env.APP_NAME }}"
            ARCHIVE_NAME="${{ env.APP_NAME }}-${VERSION}-linux-${{ matrix.arch }}.tar.gz"
            tar -czvf "${ARCHIVE_NAME}" -C "dist/" "${{ env.APP_NAME }}"
          fi
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ steps.package.outputs.ASSET_NAME }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: release-artifacts/*/*
